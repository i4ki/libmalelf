; itoa tests
; by i4k

BITS 32

%macro  prologue 0
        push    ebp
        mov     ebp,esp
%endmacro

%macro  prologue 1
        push    ebp
        mov     ebp,esp
        sub     esp,%1
%endmacro

%macro epilogue 0
        mov esp, ebp
        pop ebp
%endmacro

        global _start
        section .text
_start:
        prologue
        push dword 0x0000000a
        push dword 0x41414141
        call strlen
        
        mov edx, eax
        mov ecx, esp
        mov ebx, 1
        mov eax, 4
        int 0x80
        
        push 1337
        call itoa

        mov edx, ecx
        mov ecx, eax    ; number string
        mov ebx, 1
        mov eax, 4
        int 0x80

        mov eax, 1
        mov ebx, 0
        int 0x80

        epilogue

; unsigned int stringlen(char* str);
strlen:
    prologue

    mov ecx, [ebp+8]    ; primeiro parametro
    xor eax, eax        ; contador
    push dword ecx
    mov ecx, esp

stringlen_loopStart:
    xor dx, dx
    add ecx, eax
    mov dl, byte [ecx]
    inc eax

    cmp dl, 0x0 ; null byte
    jne stringlen_loopStart
stringlen_loopEnd:
    epilogue
    ret

reverse_str:
        prologue 8
        mov ecx, [ebp+8]
        mov ebx, [ebp+12]

        cmp ecx, 1
        jb done

        lea edx, [ebx+ecx-1]    ;; points to the last char in the string
        shr ecx, 1

reverse_loop:
        mov al, [ebx]
        xchg al, [edx]
        mov [ebx], al    ;; ebx and edx swapped
        inc ebx
        dec edx
        loop reverse_loop      

done:
        mov eax, ebx
        epilogue
        ret
        
itoa:
        prologue
        mov eax, [ebp+8]
        xor ecx, ecx          ; counter
        sub eax, 0


        jl negative
        jmp convert
negative:
        mov ebx, esp
        mov byte [ebx], 0x2D
        inc ecx
convert:
        xor edx, edx
        mov ebx, 10
        div ebx
        mov ebx, esp
        add ebx, ecx
        mov byte [ebx], dl
        add byte [ebx], 0x30
        
        inc ecx
        test al, al
        jnz convert

        push ecx
        push eax
        call reverse_str        

        mov ebx, ecx
        epilogue
        ret

