; itoa64 tests
; by i4k

BITS 64

%macro  prologue 0
        push    rbp
        mov     rbp, rsp
%endmacro

%macro  prologue 1
        push    rbp
        mov     rbp, rsp
        sub     rsp, %1
%endmacro

%macro epilogue 0
        mov rsp, rbp
        pop rbp
%endmacro

        global _start
        section .text
_start:
        prologue
        mov rdi, 1337
        call itoa64

        ; Write the number string
        mov rdx, rax        ; length
        mov rsi, rdi        ; string pointer
        mov rdi, 1          ; stdout
        mov rax, 1          ; sys_write
        syscall

        ; Exit
        mov rdi, 0
        mov rax, 60         ; sys_exit
        syscall

        epilogue

; rdi: number to convert
; returns: rdi: pointer to string, rax: length
itoa64:
        prologue 32         ; Allocate space for string buffer
        
        mov rax, rdi        ; number to convert
        mov rdi, rbp        ; use stack space for string
        sub rdi, 32         ; point to buffer start
        mov rcx, 0          ; counter for digits
        
        test rax, rax
        jns .convert        ; if positive, start converting
        
        ; Handle negative number
        neg rax             ; make number positive
        mov byte [rdi], '-' ; add minus sign
        inc rdi
        inc rcx
        
.convert:
        mov rbx, 10         ; divisor
        xor rdx, rdx        ; clear rdx for division
        div rbx             ; rax = rax/10, rdx = remainder
        
        add dl, '0'         ; convert to ASCII
        mov [rdi], dl       ; store digit
        inc rdi
        inc rcx
        
        test rax, rax       ; check if we're done
        jnz .convert
        
        ; Reverse the string
        mov rsi, rbp
        sub rsi, 32         ; start of buffer
        mov rdi, rsi
        add rdi, rcx
        dec rdi             ; end of string
        
.reverse_loop:
        cmp rsi, rdi
        jge .done
        
        mov al, [rsi]
        mov bl, [rdi]
        mov [rsi], bl
        mov [rdi], al
        
        inc rsi
        dec rdi
        jmp .reverse_loop
        
.done:
        mov rax, rcx        ; return length
        mov rdi, rbp
        sub rdi, 32         ; return string pointer
        epilogue
        ret 